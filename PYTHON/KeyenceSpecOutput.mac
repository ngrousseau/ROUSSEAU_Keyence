###############################
### DEFINE GLOBAL VARIABLES ###
###############################

global TESTROWS

###############################
###############################
###############################


##########################
### READ IN ARRAY SIZE ###
##########################

def readsize '{
    local length_array
    local size_array, data_pt, array_full
    
    ### The first input is the array file name. ###
    ### The second input is the initial data point in the array file. ###
    ### The second input is an optional input. Default is the first data point. ###	
    size_array = "$1"	

    
    array length_array[2][2]
    
    ####################
    ### array format ###
    ####################
    
    ### first column in the array (i.e. col 0) must contain integers, starting from 1. Do not start from 0 ###
    # col 0: data point number, starting from 1
    # col 1: SPEC Stage Command Array Length
    
    #################################
    #################################
    #################################
    
    ### the array file should be in the user aux directory ###
    size_file = sprintf("/%s/%s", CWD, size_array)
    array_read(size_file, length_array)
    
    data_pt = size[0][0]
    TESTROWS = size[0][1]
    p TESTROWS
    
}'

###########################
###########################
###########################


###############################
### READ IN MOTOR POSITIONS ###
###############################

def laserscan '{
    local part_coord
    local labx, laby, labz, omega, scanflag, rotflag
    local pos_array, data_pts, array_full, initial_pt
    local check
    
    ### The first input is the array file name. ###
    ### The second input is the initial data point in the array file. ###
    ### The second input is an optional input. Default is the first data point. ###	
    pos_array = "$1"	
    if ($2 != 0) {
        initial_pt = $2-1
    } else {
        initial_pt = 0
    }
    
    array part_coord[TESTROWS][7]
    
    ####################
    ### array format ###
    ####################
    
    ### first column in the array (i.e. col 0) must contain integers, starting from 1. Do not start from 0 ###
    # col 0: data point number, starting from 1
    # col 1: labx
    # col 2: laby
    # col 3: labz
    # col 4: omega
    # col 5: scanflag
    # col 6: rotflag
    
    #################################
    #################################
    #################################
    
    ### the array file should be in the user aux directory ###
    array_full = sprintf("/%s/%s", CWD, pos_array)
    array_read(array_full, part_coord)
    
    check = 0
    for (j = initial_pt;  j < ROWS; j++) {
        data_pt = part_coord[j][0]
        labx = part_coord[j][1]
        laby = part_coord[j][2]
        labz = part_coord[j][3]
        omega = part_coord[j][4]
        scanflag = part_coord[j][5]
        rotflag = part_coord[j][6]
        
        umv x labx y laby z labz phi omega
        # do_sleep(1)
        
        while (check == 0) {
            if (phi == 90) {
                mv KeyenceScan.txt KeyenceScan_0.txt
                rm KeyenceScan.txt
                check = 1
                break
            break
            }    
        }
        
        while (check == 1) {
            if (phi == 180) {
                mv KeyenceScan.txt KeyenceScan_90.txt
                rm KeyenceScan.txt
                check = 2
                break
            break
            }    
        }
        
        while (check == 2) {
            if (phi == 270) {
                mv KeyenceScan.txt KeyenceScan_180.txt
                rm KeyenceScan.txt
                check = 3
                break
            break
            }    
        }
        
        if (scanflag == 1) {
        INI2JSONPY = "ROUSSEAU_3DScan.py"
        INI2JSON_COMMMAND = sprintf("/bin/python %s",  INI2JSONPY)
        unix(sprintf("%s", INI2JSON_COMMMAND))
        }
    }
}'